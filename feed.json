{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Projects",
    "description": "",
    "home_page_url": "https://nsafran.com",
    "feed_url": "https://nsafran.com/feed.json",
    "user_comment": "",
    "author": {
        "name": "Nathan Safran"
    },
    "items": [
        {
            "id": "https://nsafran.com/ins-1-nixie-tube-matrix.html",
            "url": "https://nsafran.com/ins-1-nixie-tube-matrix.html",
            "title": "INS-1 Nixie Tube Matrix",
            "summary": "Code and Board design files: https://github.com/nsafran1217/INS-1_Matrix Project where the board is used: Nixie and VFD Weather Clock This was inspired by the excellent Neon Pixels project I designed my own board because Neon Pixels seems too difficult to build. This board is an 6x10 matrix&hellip;",
            "content_html": "<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://nsafran.com/media/posts/37/test-pattern-ins1.gif\" alt=\"\" width=\"600\" height=\"450\"></figure>\n<p>Code and Board design files: <a href=\"https://github.com/nsafran1217/INS-1_Matrix\">https://github.com/nsafran1217/INS-1_Matrix</a><br>Project where the board is used: <a href=\"https://nsafran.com/nixie-and-vfd-weather-clock.html\">Nixie and VFD Weather Clock</a></p>\n<p>This was inspired by the excellent <a href=\"https://hackaday.io/project/173636-neon-pixels\" target=\"_blank\" rel=\"noopener noreferrer\">Neon Pixels project</a><br>I designed my own board because Neon Pixels seems too difficult to build.</p>\n<p>This board is an 6x10 matrix of INS-1 (ИНС-1) Nixie tube indicators. I chose 6X10 because I wanted to use the board to display weather icons (a cloud, the sun, rain, etc.). Putting 2 together would give me a 12x10 display, which gave enough pixels to play with and wasn't too physically big. 6x10 also is 60 tubes per board, so we used most of the shift register outputs.</p>\n<p>I used HV5530 32-bit high voltage shift registers to control each tube. The HV and 12V supply for the board would be provided on the input connector. I made the displays chainable with a simple 8 pin connector.<br>I wish I was able to make the board smaller, but there was no where to put the chip or route the traces.</p>\n<p>This was the first board where I had JLCPCB assemble the boards. They did all the resistors and capacitors, which was well worth the money. Soldering the HV5530 by hand was not too difficult.</p>\n<p>I made two big mistakes on this board.</p>\n<ol>\n<li>I connected Polarity on the HV5530 to GND. POL is active low, so all bits were inverted. I did this because I knew I'd be driving the logic signals through transistors which would invert the signal, but this cause the BLNK pin to light the display when it was true, which removed any possibility of PWM dimming. I ended up disconnecting it from GND and running a bodge wire to 12V. I have fixed this in the KiCAD design files so it is connected to 12V, and the code is setup to account for this.</li>\n<li>I put the anode resistors too close to the plated through holes for the tubes. When JLCPCB assembled the board, the solder from the resistors flowed into the holes. I had to suck the solder out of most of the anode holes for the tubes. If I ever build more of these board, I will probably have new ones made. I have not fixed this in the KiCAD files yet.</li>\n</ol>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/37/gallery/20231204_193126.jpg\" data-size=\"1937x1987\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/37/gallery/20231204_193126-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"739\"></a></figure>\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/37/gallery/20231204_192622.jpg\" data-size=\"1547x3353\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/37/gallery/20231204_192622-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"1561\"></a></figure>\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/37/gallery/20231204_192517.jpg\" data-size=\"2203x2268\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/37/gallery/20231204_192517-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"741\"></a></figure>\n</div></div>\n<h2>Image Design Program</h2>\n<p>I made a very sloppy program in c# with winforms to help design the images/animations and generate the arrays for the matrix display.<br>This program allows you to input a custom display size, and number of displays. It makes many assumptions about the display, so its really only usable for this project.<br>It supports saving and loading images and animations from JSON files, scrolling through the animation, deleting frames, specifying the frame time in ms, and properly counts the number of frames in the animates. It provides formatted code that you can paste directly into your Arduino source files. You just need to define the array.</p>\n<p>I'm sure there's an easier way to do this, but this is what I came up with.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://nsafran.com/media/posts/37/matrixdesigner.PNG\" sizes=\"100vw\" srcset=\"https://nsafran.com/media/posts/37/responsive/matrixdesigner-xs.PNG 300w ,https://nsafran.com/media/posts/37/responsive/matrixdesigner-sm.PNG 480w ,https://nsafran.com/media/posts/37/responsive/matrixdesigner-md.PNG 768w ,https://nsafran.com/media/posts/37/responsive/matrixdesigner-lg.PNG 1024w ,https://nsafran.com/media/posts/37/responsive/matrixdesigner-xl.PNG 1360w ,https://nsafran.com/media/posts/37/responsive/matrixdesigner-2xl.PNG 1600w\"  alt=\"\" width=\"1032\" height=\"631\"></figure>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "Nixie",
                   "Electronics",
                   "Arduino"
            ],
            "date_published": "2023-12-03T21:50:07-05:00",
            "date_modified": "2024-04-15T23:13:09-04:00"
        },
        {
            "id": "https://nsafran.com/nixie-and-vfd-weather-clock.html",
            "url": "https://nsafran.com/nixie-and-vfd-weather-clock.html",
            "title": "Nixie and VFD Weather Clock",
            "summary": "This project is mostly finished. I still want to modify some of the animations I made, and get a front panel made from aluminum rather than 3D printed. https://github.com/nsafran1217/NixieWeatherClock This clock is powered by an esp32 and features a IN-12 Nixie tube clock, a 12x10&hellip;",
            "content_html": "<p>This project is mostly finished. I still want to modify some of the animations I made, and get a front panel made from aluminum rather than 3D printed.<br><a href=\"#INTERNAL_LINK#/post/null\">https://github.com/nsafran1217/NixieWeatherClock</a></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://nsafran.com/media/posts/36/20240415_231353.jpg\" sizes=\"100vw\" srcset=\"https://nsafran.com/media/posts/36/responsive/20240415_231353-xs.jpg 300w ,https://nsafran.com/media/posts/36/responsive/20240415_231353-sm.jpg 480w ,https://nsafran.com/media/posts/36/responsive/20240415_231353-md.jpg 768w ,https://nsafran.com/media/posts/36/responsive/20240415_231353-lg.jpg 1024w ,https://nsafran.com/media/posts/36/responsive/20240415_231353-xl.jpg 1360w ,https://nsafran.com/media/posts/36/responsive/20240415_231353-2xl.jpg 1600w\"  alt=\"\" width=\"2079\" height=\"1099\"></figure>\n<h1>Nixie and VFD Weather clock</h1>\n<p>This clock is powered by an esp32 and features a IN-12 Nixie tube clock, a 12x10 INS-1 Neon Indicator matrix, and a 6 character IV-27 VFD display. The clock retrieves the time and weather from the internet at regular intervals and displays current or future weather. The weather display can be set to either future, current, or a rotation of both times. The current weather time frame displayed is indicated by an AL102 LED.</p>\n<p>All of the displays including LEDs in this clock are soviet surplus, so I wanted it to look like an old piece of soviet military equipment. All of the front panel lettering and messages displayed on the alphanumeric IV-17 tubes are written in Russian.</p>\n<p>This clock uses the three boards I designed, plus one additional board that was hand made.<br><a href=\"https://github.com/nsafran1217/NixieBoard\">Nixie Tube Board</a> - A variation on my <a href=\"https://nsafran.com/nixie-tube-clock.html\">nixie tube clock</a> board that is smaller and takes input on a connector.<br><a href=\"https://nsafran.com/iv17-vfd-board.html\">IV-17  VFD Board</a><br><a href=\"https://nsafran.com/ins-1-nixie-tube-matrix.html\">INS-1 Matrix Board</a><br>All board designs and Arduino libraries are available on GitHub.</p>\n<p>For the HV power supply, I use a <a href=\"https://omnixie.com/products/nch6300hv-nixie-hv-power-module\">NCH6300HV</a> by Omnixie. I used their older design in my first Nixie clock and was happy with its performance.</p>\n<p>The clock is supplied with 12V from a USB-C connection. A small power trigger board requests 12V from the USB adapter.<br>When the adapter is first plugged in, 5V is sent to the clock. Some voltage makes it through the 7805 that supplies the esp32, but not enough to turn it on. After a few seconds, the voltage increases to 12V and the esp32 starts bringing up the other supplies. I have not seen any issues with this arrangement. </p>\n<p>A buck converter generates the 2.4V for the VFD filaments and a boost converter makes the 25V for the anode voltage. 5V for the VFD and nixie board is provided by a linear regulator. This also feeds the 5V input on the esp32.</p>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "VFD",
                   "Nixie",
                   "Electronics",
                   "Arduino"
            ],
            "date_published": "2023-12-03T21:48:55-05:00",
            "date_modified": "2024-04-15T23:20:01-04:00"
        },
        {
            "id": "https://nsafran.com/enabling-nfsv2-on-ubuntu-2204.html",
            "url": "https://nsafran.com/enabling-nfsv2-on-ubuntu-2204.html",
            "title": "Enabling NFSv2 on Ubuntu 22.04",
            "summary": "I had issues mounting an NFS export on a Ubuntu 22.04 server on some older OSes like HP-UX and Tru64. I had to enable NFSv2 to allow these systems to mount the NFS export. In /etc/default/nfs-kernel-server, change RPCNFSDOPTS to include version 2, like this:",
            "content_html": "<p>I had issues mounting an NFS export on a Ubuntu 22.04 server on some older OSes like HP-UX and Tru64. I had to enable NFSv2 to allow these systems to mount the NFS export.</p>\n<p>In <code>/etc/default/nfs-kernel-server</code>, change <!--StartFragment --><code>RPCNFSDOPTS</code> to include version 2, like this:<br><!--StartFragment --></p>\n<div>\n<div><code>RPCNFSDOPTS=\"--nfs-version 2,3,4 --debug --syslog\"</code></div>\n<!--EndFragment --></div>\n<div>Then, in <code>/etc/nfs.conf</code>, in <code>[nfsd]</code>, add <code>vers2=y</code></div>\n<div>Then restart nfs: <code><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">sudo systemctl restart nfs-kernel-server</span></code><!--EndFragment --></div>\n<div> </div>\n<div>I have my directory exported like this:</div>\n<div> </div>\n<div><!--StartFragment -->\n<div><code>/nfs 10.35.0.0/24(rw,no_root_squash,insecure)</code></div>\n<!--EndFragment --></div>\n<p><!--EndFragment --></p>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "Unix",
                   "Digital"
            ],
            "date_published": "2023-07-28T00:04:19-04:00",
            "date_modified": "2024-04-15T23:20:32-04:00"
        },
        {
            "id": "https://nsafran.com/digital-alphaserver-1000.html",
            "url": "https://nsafran.com/digital-alphaserver-1000.html",
            "title": "Digital Alphaserver 1000",
            "summary": "Digital Home I was given this machine for free because it had a bad power supply. I took apart the power supply, but didn't see any damage. All I found was a loose screw, so I put it back together and the power supply seems&hellip;",
            "content_html": "<p><a href=\"https://nsafran.com/digital-equipment-corporation.html\">Digital Home</a></p>\n<p>I was given this machine for free because it had a bad power supply. I took apart the power supply, but didn't see any damage. All I found was a loose screw, so I put it back together and the power supply seems to work fine.</p>\n<p>When I first got the machine, I could not enter the ARC firmware console. When I entered \"arc\" at the SRM console, the console would say \"ARC firmware loaded\" and freeze. I found a post on <a href=\"https://www.vogons.org/viewtopic.php?t=89289&amp;p=1093248\">vogons</a> that described a similar problem on an alphastation. Doing the same repair on the Dallas DS1287 TOY NVRAM fixed my issue.</p>\n<p>I have OpenVMS 8.4, Tru64 5.1B, Windows NT, and Windows 2000 installed on the system.</p>\n<p> </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://nsafran.com/media/posts/34/20230306_232957-3.jpg\" sizes=\"100vw\" srcset=\"https://nsafran.com/media/posts/34/responsive/20230306_232957-3-xs.jpg 300w ,https://nsafran.com/media/posts/34/responsive/20230306_232957-3-sm.jpg 480w ,https://nsafran.com/media/posts/34/responsive/20230306_232957-3-md.jpg 768w ,https://nsafran.com/media/posts/34/responsive/20230306_232957-3-lg.jpg 1024w ,https://nsafran.com/media/posts/34/responsive/20230306_232957-3-xl.jpg 1360w ,https://nsafran.com/media/posts/34/responsive/20230306_232957-3-2xl.jpg 1600w\"  alt=\"\" width=\"2091\" height=\"2523\"></figure>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "Unix",
                   "OpenVMS",
                   "Digital"
            ],
            "date_published": "2023-03-08T20:28:28-05:00",
            "date_modified": "2024-04-15T23:20:38-04:00"
        },
        {
            "id": "https://nsafran.com/iv17-vfd-board.html",
            "url": "https://nsafran.com/iv17-vfd-board.html",
            "title": "IV17 VFD Board",
            "summary": "https://github.com/nsafran1217/VFD-IV-17 This board now has a permanent home in my Nixie/VFD Weather clock I finally built a case for this board, though I still don't have a permanent use for it. I 3d printed a case that let me fit the 2 power supplies and&hellip;",
            "content_html": "<p><a href=\"https://github.com/nsafran1217/VFD-IV-17\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/nsafran1217/VFD-IV-17</a></p>\n<p>This board now has a permanent home in my <a href=\"https://nsafran.com/nixie-and-vfd-weather-clock.html\">Nixie/VFD Weather clock</a></p>\n<p>I finally built a case for this board, <span style=\"text-decoration: line-through;\">though I still don't have a permanent use for it.</span> I 3d printed a case that let me fit the 2 power supplies and connectors in one place.</p>\n<p>I wrote a few assembly routines to use the display with my z80 computer. It uses the z80-pio to talk to it. </p>\n<p>The assembly is in the files called \"iv17*.s\" in my GitHub repo for my computer:<br><a href=\"https://github.com/nsafran1217/z80-asm/tree/master/myCode/DeviceDemos\">https://github.com/nsafran1217/z80-asm/tree/master/myCode/DeviceDemos</a></p>\n<p>As a part of this, I also wrote a simple clock program with an RTCDS3231 connected to the z80-pio. I bit-banged the i2c.<br>If anyone is looking for examples of i2c bit banging on the z80, look at i2c.s and RTCDS3231bitBang.s. clock-iv17.s puts it all together into one program.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/33/gallery/20230621_222751.jpg\" data-size=\"4032x2268\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/33/gallery/20230621_222751-thumbnail.jpg\" alt=\"Clock and front view\" width=\"720\" height=\"405\"></a>\n<figcaption>Clock and front view</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/33/gallery/20230623_152055.jpg\" data-size=\"4032x2268\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/33/gallery/20230623_152055-thumbnail.jpg\" alt=\"Connectors\" width=\"720\" height=\"405\"></a>\n<figcaption>Connectors</figcaption>\n</figure>\n</div></div>\n<p> </p>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "z80",
                   "VFD",
                   "Electronics",
                   "Arduino"
            ],
            "date_published": "2022-10-26T18:41:31-04:00",
            "date_modified": "2024-04-15T23:20:55-04:00"
        },
        {
            "id": "https://nsafran.com/nixie-tube-clock.html",
            "url": "https://nsafran.com/nixie-tube-clock.html",
            "title": "Nixie Tube Clock",
            "summary": "https://github.com/nsafran1217/arduino-nixie-clock Custom Nixie tube clock using in-12 tubes This was the first project I've completed with professionally made boards. I used JLCPCB, since they were cheap. This was also the first time I used a EDA tool. I use Eagle since there were a lot&hellip;",
            "content_html": "<p><a href=\"https://github.com/nsafran1217/arduino-nixie-clock\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/nsafran1217/arduino-nixie-clock</a></p>\n<p>Custom Nixie tube clock using in-12 tubes</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/32/gallery/20211219_154010.jpg\" data-size=\"4032x2268\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/32/gallery/20211219_154010-thumbnail.jpg\" alt=\"Completed clock\" width=\"720\" height=\"405\"></a>\n<figcaption>Completed clock</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/32/gallery/20200404_224704.jpg\" data-size=\"4032x2268\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/32/gallery/20200404_224704-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"405\"></a></figure>\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/32/gallery/20200404_224722.jpg\" data-size=\"4032x2268\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/32/gallery/20200404_224722-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"405\"></a></figure>\n</div></div>\n<p>This was the first project I've completed with professionally made boards. I used JLCPCB, since they were cheap.</p>\n<p>This was also the first time I used a EDA tool. I use Eagle since there were a lot of tutorials available.</p>\n<p>I made some mistakes related to spacing of the traces. I used one spacing for all the signal, and I think the HV traces are still to close.</p>\n<p>The code is messy, but it works well for what it is. I did have to make one change to the board to bring 5v out to the connector for the rotary encoder, but that was a simple bodge wire to add.</p>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "Nixie",
                   "Electronics",
                   "Arduino"
            ],
            "date_published": "2022-10-26T18:41:16-04:00",
            "date_modified": "2023-12-03T21:47:22-05:00"
        },
        {
            "id": "https://nsafran.com/nixie-and-vfds.html",
            "url": "https://nsafran.com/nixie-and-vfds.html",
            "title": "Nixie and VFDs",
            "summary": "Nixie and VFD Weather Clock INS-1 Nixie Tube Matrix IV17 VFD Board Nixie Tube Clock",
            "content_html": "<p><a href=\"https://nsafran.com/nixie-and-vfd-weather-clock.html\">Nixie and VFD Weather Clock</a></p>\n<p><a href=\"https://nsafran.com/ins-1-nixie-tube-matrix.html\">INS-1 Nixie Tube Matrix</a></p>\n<p><a href=\"https://nsafran.com/iv17-vfd-board.html\">IV17 VFD Board</a></p>\n<p><a href=\"https://nsafran.com/nixie-tube-clock.html\">Nixie Tube Clock</a></p>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "VFD",
                   "Nixie",
                   "Electronics"
            ],
            "date_published": "2022-10-26T18:30:24-04:00",
            "date_modified": "2023-12-03T22:29:22-05:00"
        },
        {
            "id": "https://nsafran.com/chassis-and-backplane.html",
            "url": "https://nsafran.com/chassis-and-backplane.html",
            "title": "Chassis and Backplane",
            "summary": "Custom Z80 Computer Home The chassis is a cheap metal project box that you can find all over Amazon or eBay. I liked it because the color reminded me of an Altair 8800. I 3D printed some parts to help hold the PSU (from an&hellip;",
            "content_html": "<p><a href=\"https://nsafran.com/custom-z80-computer.html\">Custom Z80 Computer Home</a></p>\n<h2>Overview</h2>\n<p>The chassis is a cheap metal project box that you can find all over Amazon or eBay. I liked it because the color reminded me of an Altair 8800. I 3D printed some parts to help hold the PSU (from an old Dell PC) and the disk drives. The backplane is sandwiched in between two 3D printed pieces. Bolts come up through the bottom of the chassis through the  guide rails for the PCBs to hold the entire assembly together. I'm not happy with this design. Eventually I want to get a larger backplane so I can install more cards. Right now, I can't fit everything at the same time.</p>\n<p>The backplane is just a 40 row strip board with pin headers soldered on it.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/30/gallery/20221022_213609-2.jpg\" data-size=\"2565x1625\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/30/gallery/20221022_213609-2-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"456\"></a></figure>\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/30/gallery/20221025_222821-2.jpg\" data-size=\"2819x2267\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/30/gallery/20221025_222821-2-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"579\"></a></figure>\n</div></div>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "z80"
            ],
            "date_published": "2022-10-25T22:24:15-04:00",
            "date_modified": "2023-03-08T19:50:04-05:00"
        },
        {
            "id": "https://nsafran.com/lcd-board.html",
            "url": "https://nsafran.com/lcd-board.html",
            "title": "LCD Board",
            "summary": "Custom Z80 Computer Home I don't really have an application for this board, and I'm not sure why I built it. It works. Originally I didn't have a bus transceiver, but that didn't work with the graphical LCD I was trying to use, so I&hellip;",
            "content_html": "<p><a href=\"https://nsafran.com/custom-z80-computer.html\">Custom Z80 Computer Home</a></p>\n<h2>Overview</h2>\n<p>I don't really have an application for this board, and I'm not sure why I built it. It works. Originally I didn't have a bus transceiver, but that didn't work with the graphical LCD I was trying to use, so I added one.</p>\n<p>I wrote subroutines to control both 1602 and 2004 LCD screens (in <a href=\"https://github.com/nsafran1217/z80-asm/tree/master/myCode/DeviceDemos\" target=\"_blank\" rel=\"noopener noreferrer\">DeviceDemos</a>)</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/29/gallery/20221025_230348.jpg\" data-size=\"4032x2268\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/29/gallery/20221025_230348-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"405\"></a></figure>\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/29/gallery/lcd-sch.png\" data-size=\"2011x1367\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/29/gallery/lcd-sch-thumbnail.png\" alt=\"\" width=\"720\" height=\"489\"></a></figure>\n</div></div>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "z80"
            ],
            "date_published": "2022-10-22T22:46:34-04:00",
            "date_modified": "2022-10-25T23:24:28-04:00"
        },
        {
            "id": "https://nsafran.com/logic-analyzer-interface-board.html",
            "url": "https://nsafran.com/logic-analyzer-interface-board.html",
            "title": "Logic Analyzer Interface Board",
            "summary": "Custom Z80 Computer Home This board is a clone of the LAIR Pro for the RC-2014 bus. I only changed the bus connection to fit my 40 pin layout.",
            "content_html": "<p><a href=\"https://nsafran.com/custom-z80-computer.html\">Custom Z80 Computer Home</a></p>\n<h2>Overview</h2>\n<p>This board is a clone of the <a href=\"https://github.com/MustBeArt/LAIR\" target=\"_blank\" rel=\"noopener noreferrer\">LAIR Pro</a> for the RC-2014 bus. I only changed the bus connection to fit my 40 pin layout.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://nsafran.com/media/posts/28/gallery/20221025_222556.jpg\" data-size=\"4032x2268\"><img loading=\"lazy\" src=\"https://nsafran.com/media/posts/28/gallery/20221025_222556-thumbnail.jpg\" alt=\"\" width=\"720\" height=\"405\"></a></figure>\n</div></div>",
            "author": {
                "name": "Nathan Safran"
            },
            "tags": [
                   "z80"
            ],
            "date_published": "2022-10-22T22:45:41-04:00",
            "date_modified": "2023-03-08T19:50:14-05:00"
        }
    ]
}
